#
# A simple theme that displays relevant, contextual information.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#   Anthony Williams <hi@antw.io>
#

# Load dependencies.

# pmodload 'helper'
# 
# : ${PROMPT_SYMBOL:=">"}
# : ${PROMPT_UNSTAGED_SYMBOL:="*"}
# : ${PROMPT_STAGED_SYMBOL:="!"}
# 
# prompt_antw_precmd() {
#   vcs_info
# 
#   if [ -n "$SSH_CLIENT" ]; then
#     prompt_host='%F{yellow}%M '
#   else
#     prompt_host=''
#   fi
# 
#   PROMPT="${prompt_host}%F{"12"}$(prompt-pwd)%f %F{"1"}%B${PROMPT_SYMBOL}%b%f "
#   RPROMPT="${vcs_info_msg_0_}"
# }
# 
# prompt_antw_setup() {
#   autoload -Uz add-zsh-hook
#   autoload -Uz vcs_info
# 
#   zstyle ':vcs_info:*' enable git
#   zstyle ':vcs_info:*' formats "%F{11} %b%f%F{1}%u%c%f"
#   zstyle ':vcs_info:*' check-for-changes true
#   zstyle ':vcs_info:*' unstagedstr $PROMPT_UNSTAGED_SYMBOL
#   zstyle ':vcs_info:*' stagedstr $PROMPT_STAGED_SYMBOL
# 
#   setopt prompt_subst
# 
#   add-zsh-hook precmd prompt_antw_precmd
# }
# 
# prompt_antw_setup "$@"

# ------------------------------------------------------------------------------

# Load dependencies.
pmodload 'helper'

function prompt_antw_async_callback {
  case $1 in
    prompt_antw_async_git)
      # We can safely split on ':' because it isn't allowed in ref names.
      IFS=':' read _git_target _git_post_target <<<"$3"

      # The target actually contains 3 space separated possibilities, so we need to
      # make sure we grab the first one.
      _git_target=$(coalesce ${(@)${(z)_git_target}})

      if [[ -z "$_git_target" ]]; then
        # No git target detected, flush the git fragment and redisplay the prompt.
        if [[ -n "$_prompt_antw_git" ]]; then
          _prompt_antw_git=''
          zle && zle reset-prompt
        fi
      else
        # Git target detected, update the git fragment and redisplay the prompt.
        _prompt_antw_git="${_git_target}${_git_post_target}"
        zle && zle reset-prompt
      fi
      ;;
  esac
}

function prompt_antw_async_git {
  cd -q "$1"
  if (( $+functions[git-info] )); then
    git-info
    print ${git_info[status]}
  fi
}

function prompt_antw_async_tasks {
  # Initialize async worker. This needs to be done here and not in
  # prompt_antw_setup so the git formatting can be overridden by other prompts.
  if (( !${prompt_prezto_async_init:-0} )); then
    async_start_worker prompt_antw -n
    async_register_callback prompt_antw prompt_antw_async_callback
    typeset -g prompt_prezto_async_init=1
  fi

  # Kill the old process of slow commands if it is still running.
  async_flush_jobs prompt_antw

  # Compute slow commands in the background.
  async_job prompt_antw prompt_antw_async_git "$PWD"
}

function prompt_antw_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  _prompt_antw_pwd=$(prompt-pwd)

  # Handle updating git data. We also clear the git prompt data if we're in a
  # different git root now.
  if (( $+functions[git-dir] )); then
    local new_git_root="$(git-dir 2> /dev/null)"
    if [[ $new_git_root != $_antw_cur_git_root ]]; then
      _prompt_antw_git=''
      _antw_cur_git_root=$new_git_root
    fi
  fi

  # Run python info (this should be fast and not require any async)
  if (( $+functions[python-info] )); then
    python-info
  fi

  prompt_antw_async_tasks
}

function prompt_antw_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent sp subst)
  _prompt_antw_precmd_async_pid=0
  _prompt_antw_precmd_async_data=$(mktemp "${TMPDIR:-/tmp}/antw-prompt-async-XXXXXXXXXX")

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz async && async

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_antw_precmd

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{7}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format ' %B%F{1}❯%F{3}❯%F{2}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format ' %F{3}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format ' %B%F{2}❮%F{3}❮%F{1}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format '%F{7}:%f%%B%F{9}%s%f%%b'
  zstyle ':prezto:module:git:info:branch' format ' %F{2}%b%f'
  zstyle ':prezto:module:git:info:commit' format ' %%B%F{3}%.7c%f%%b'
  zstyle ':prezto:module:git:info:stashed' format ' %%B%F{6}$%f%%b'

#   zstyle ':prezto:module:git:info:action' format ':%%B%F{yellow}%s%f%%b'
#   zstyle ':prezto:module:git:info:commit' format ':%F{green}%.7c%f'
#   zstyle ':prezto:module:git:info:branch' format '%b'
  zstyle ':prezto:module:git:info:dirty' format '%F{2}*%f'
#   zstyle ':prezto:module:git:info:position' format ':%F{red}%p%f'
  zstyle ':prezto:module:git:info:added' format '%B%F{red}!%f%b'

  zstyle ':prezto:module:git:info:keys' format \
    'status' '%b %p %c:%s%S%D%a'
    # 'status' '%b %p %c:%s%A%B%S%a%d%m%r%U%u'

  # Set up non-zero return value display
  local show_return="✘ "
  # Default is to show the return value
  if zstyle -T ':prezto:module:prompt' show-return-val; then
    show_return+='%? '
  fi
  # Set python-info format
  zstyle ':prezto:module:python:info:virtualenv' format '%f%F{3}(%v)%F{7} '

  # Get the async worker set up
  _antw_cur_git_root=''

  _prompt_antw_git=''
  _prompt_antw_pwd=''

  # Define prompts.
  PROMPT='${SSH_TTY:+"%F{9}%n%f%F{7}@%f%F{3}%m%f "}%F{4}${_prompt_antw_pwd}%(!. %B%F{1}#%f%b.)${editor_info[keymap]} '
  RPROMPT='${editor_info[overwrite]}%(?:: %F{1}'
  RPROMPT+=${show_return}
  RPROMPT+='%f)${VIM:+" %B%F{6}V%f%b"}${_prompt_antw_git}'
  SPROMPT='zsh: correct %F{1}%R%f to %F{2}%r%f [nyae]? '
}

function prompt_antw_preview {
  local +h PROMPT=''
  local +h RPROMPT=''
  local +h SPROMPT=''

  editor-info 2> /dev/null
  prompt_preview_theme 'antw'
}

prompt_antw_setup "$@"
